{"version":3,"sources":["components/Comment.tsx","components/CommentList.tsx","components/User.tsx","components/Post.tsx","components/PostList.tsx","api/constants.ts","api/getData.ts","components/Search.tsx","components/LoadButton.tsx","components/LoaderContainer.tsx","index.tsx","App.tsx","api/filter.ts"],"names":["Comment","name","email","body","className","CommentList","comments","map","comment","key","id","User","user","username","city","address","Post","post","title","PostList","posts","URL","getData","url","a","fetch","response","json","getPreparedPosts","Promise","all","postsFromServer","usersFromServer","commentsFromServer","find","userId","filter","postId","Search","query","handleSearch","type","value","onChange","placeholder","LoadButton","handleLoad","onClick","LoaderContainer","color","height","width","timeout","ReactDOM","render","useState","setPosts","isLoaded","setIsLoaded","isLoading","setIsLoading","setQuery","postsToShow","useMemo","length","array","queryToLowerCase","toLowerCase","item","includes","filterPosts","e","target","document","getElementById"],"mappings":"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","file":"static/js/main.8f16d02e.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport const Comment: FC<Props> = ({ name, email, body }) => {\n  return (\n    <>\n      <h5 className=\"comment__name\">{name}</h5>\n      <p className=\"comment__body\">{body}</p>\n      <p className=\"comment__email\">{email}</p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments?: CommentInterface[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => (\n  <>\n    {comments && comments.map(comment => (\n      <li key={comment.id} className=\"comment\">\n        <Comment {...comment} />\n      </li>\n    ))}\n  </>\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { username, email, address } = user;\n  const { city } = address;\n\n  return (\n    <div className=\"user\">\n      <p>{username}</p>\n      <p>{email}</p>\n      <p>{city}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { CommentList } from './CommentList';\nimport { User } from './User';\n\ninterface Props {\n  post: PreparedPost;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title, body, comments, user,\n  } = post;\n\n  return (\n    <>\n      <p>{}</p>\n      <h2>{title}</h2>\n      <p>{body}</p>\n      {user && <User user={user} />}\n      <p>Comments</p>\n      <ul className=\"comments list\">\n        <CommentList comments={comments} />\n      </ul>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from './Post';\n\ninterface Props {\n  posts: PreparedPost[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => (\n  <ul className=\"list\">\n    {posts.map(post => (\n      <li key={post.id} className=\"list__item\">\n        <Post post={post} />\n      </li>\n    ))}\n  </ul>\n);\n","export const URL = 'https://jsonplaceholder.typicode.com/';\nexport const POSTS = 'posts';\nexport const USERS = 'users';\nexport const COMMENTS = 'comments';\n","import {\n  POSTS, COMMENTS, USERS, URL,\n} from './constants';\n\nasync function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getPosts = (): Promise<PostInterface[]> => {\n  return getData(URL + POSTS);\n};\n\nexport const getComments = (): Promise<CommentInterface[]> => {\n  return getData(URL + COMMENTS);\n};\n\nexport const getUsers = (): Promise<UserInterface[]> => {\n  return getData(URL + USERS);\n};\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const [postsFromServer,\n    usersFromServer,\n    commentsFromServer]\n          = await Promise.all(\n            [getPosts(),\n              getUsers(),\n              getComments(),\n            ],\n          );\n\n  return postsFromServer.map(post => ({\n    ...post,\n    user: usersFromServer.find(user => user.id === post.userId) as UserInterface,\n    comments: commentsFromServer.filter(comment => comment.postId === post.id),\n  }));\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  query: string;\n  handleSearch: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const Search: FC<Props> = ({ query, handleSearch }) => (\n  <>\n    <input\n      className=\"search\"\n      type=\"text\"\n      value={query}\n      onChange={handleSearch}\n      placeholder=\"Search...\"\n    />\n  </>\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  handleLoad: () => void;\n}\n\nexport const LoadButton: FC<Props> = ({ handleLoad }) => (\n  <>\n    <button className=\"button\" type=\"button\" onClick={handleLoad}>Load posts</button>\n  </>\n);\n","import React, { FC } from 'react';\nimport Loader from 'react-loader-spinner';\n\nexport const LoaderContainer: FC = () => (\n  <div className=\"loader\">\n    <Loader\n      type=\"Hearts\"\n      color=\"#00BFFF\"\n      height={100}\n      width={100}\n      timeout={3000}\n    />\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, {\n  FC, useState, ChangeEvent, useMemo,\n} from 'react';\nimport './App.css';\nimport { PostList } from './components/PostList';\nimport { getPreparedPosts } from './api/getData';\nimport { Search } from './components/Search';\nimport { LoadButton } from './components/LoadButton';\nimport { LoaderContainer } from './components/LoaderContainer';\nimport { filterPosts } from './api/filter';\n\nexport const App: FC = () => {\n  const [posts, setPosts] = useState<PreparedPost[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const handleLoad = async () => {\n    setIsLoaded(true);\n    setIsLoading(true);\n    const postsFromServer = await getPreparedPosts();\n\n    setPosts(postsFromServer);\n    setIsLoading(false);\n  };\n\n  const handleSearch = (e: ChangeEvent<HTMLInputElement>): void => {\n    setQuery(e.target.value);\n  };\n\n  const postsToShow = useMemo(() => {\n    if (!posts.length) {\n      return [];\n    }\n\n    return filterPosts(query, posts);\n  }, [query, posts]);\n\n  return (\n    <>\n      {isLoaded && <Search query={query} handleSearch={handleSearch} /> }\n      {!isLoaded && <LoadButton handleLoad={handleLoad} />}\n      {isLoaded && <PostList posts={postsToShow} />}\n      {isLoading && <LoaderContainer />}\n    </>\n  );\n};\n","export const filterPosts = (query: string, array: PreparedPost[]): PreparedPost[] => {\n  const queryToLowerCase = query.toLowerCase();\n\n  return array.filter(item => item.title.toLowerCase().includes(queryToLowerCase)\n          || item.body.toLowerCase().includes(queryToLowerCase));\n};\n"],"sourceRoot":""}